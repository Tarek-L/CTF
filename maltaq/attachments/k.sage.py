

# This file was *autogenerated* from the file k.sage
from sage.all_cmdline import *   # import sage library

_sage_const_45 = Integer(45); _sage_const_2 = Integer(2); _sage_const_4 = Integer(4); _sage_const_1401 = Integer(1401); _sage_const_2048 = Integer(2048); _sage_const_1273 = Integer(1273); _sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_50000 = Integer(50000); _sage_const_5000 = Integer(5000); _sage_const_32 = Integer(32); _sage_const_127 = Integer(127); _sage_const_0p9 = RealNumber('0.9')# Spectral-based brute-force recovery of k0
from sage.all import matrix, ZZ, log, floor, sqrt, Integer
import time

# Constants and matrix
FLAG_LEN = _sage_const_45 
K0_BYTES = (FLAG_LEN // _sage_const_2 ) + _sage_const_4   # 26
PREFIX = b"maltactf{"
G = matrix(ZZ, [[_sage_const_1401 , _sage_const_2 ], [-_sage_const_2048 , _sage_const_1273 ]])
h1 = Integer("1825310437373651425737133387514704339138752170433274546111276309")

# Estimate k0 via eigenvalue analysis
tr = G[_sage_const_0 , _sage_const_0 ] + G[_sage_const_1 , _sage_const_1 ]
det = G.det()
disc = tr**_sage_const_2  - _sage_const_4 *det
lam1 = (tr + sqrt(disc)) / _sage_const_2 

alpha = log(lam1, _sage_const_2 )
A1 = G[_sage_const_0 , _sage_const_0 ]
C = A1 / lam1
beta = log(C, _sage_const_2 ) + _sage_const_1 

n_real = (h1 - beta) / alpha
n_est = floor(n_real)
print("Estimated k0 near:", n_est)

# Search window
window = _sage_const_50000 
batch = _sage_const_5000 
found = False
start = time.time()

print(f"Scanning k0 in [{n_est - window}, {n_est + window}]...")

for i, k in enumerate(range(n_est - window, n_est + window + _sage_const_1 )):
    try:
        b = Integer(k).to_bytes(K0_BYTES, 'big')
    except OverflowError:
        continue

    if b.startswith(PREFIX):
        decoded = b.decode(errors='replace')
        tail = decoded[len(PREFIX):]
        if sum(_sage_const_32  <= ord(c) < _sage_const_127  for c in tail) >= int(len(tail) * _sage_const_0p9 ):
            print("\n✅ Found plausible k0:")
            print("k0 =", k)
            print("bytes =", b)
            print("ascii =", decoded)
            found = True
            break

    if i % batch == _sage_const_0  and i > _sage_const_0 :
        print(f"Checked {i} candidates... {time.time() - start:.1f}s elapsed")

if not found:
    print("❌ No match found in this window. Try expanding it further.")

print(f"Total time: {time.time() - start:.2f} seconds")


