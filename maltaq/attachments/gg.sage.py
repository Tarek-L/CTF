

# This file was *autogenerated* from the file gg.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_255 = Integer(255); _sage_const_19 = Integer(19); _sage_const_6525529513224929513242286153522039835677193513612437958976590021494532059727 = Integer(6525529513224929513242286153522039835677193513612437958976590021494532059727); _sage_const_42423271339336624024407863370989392004524790041279794366407913985192411875865 = Integer(42423271339336624024407863370989392004524790041279794366407913985192411875865); _sage_const_45 = Integer(45); _sage_const_4 = Integer(4); _sage_const_1401 = Integer(1401); _sage_const_1273 = Integer(1273); _sage_const_32 = Integer(32); _sage_const_1 = Integer(1); _sage_const_8 = Integer(8)# SageMath script to recover k1 via Jordan-block analysis (corrected suffix extraction)
from sage.all import GF, Integer

# ---- Parameters ----
p = _sage_const_2 **_sage_const_255  - _sage_const_19 
h2 = Integer(_sage_const_6525529513224929513242286153522039835677193513612437958976590021494532059727 )
h3 = Integer(_sage_const_42423271339336624024407863370989392004524790041279794366407913985192411875865 )
FLAG_LEN = _sage_const_45 
# k1 occupies the second half of the flag: total minus (first half+4)
k1_bytes = FLAG_LEN - ((FLAG_LEN // _sage_const_2 ) + _sage_const_4 )  # 19 bytes

# ---- Build field and compute eigenvalue (Jordan block) ----
Fp = GF(p)
tr = Fp(_sage_const_1401  + _sage_const_1273 )
lam = tr * Fp(_sage_const_2 ).inverse()  # eigenvalue λ = tr/2 in Fp

# ---- Direct recovery of n mod p ----n = (Fp(h3) * lam)/(2*(Fp(h2) - 32*h3))
A = Fp(h2) - Fp(_sage_const_32 )*Fp(h3)       # = λ^n
n_mod_p = (Fp(h3)*lam) * Fp(_sage_const_2 ).inverse() * A.inverse()
print(f"Raw n mod p = {n_mod_p}")

# ---- Reduce to the true k1 < 256^k1_bytes ----
# k1 fits in k1_bytes bytes, so we take it mod 256^k1_bytes
modulus = _sage_const_1  << (_sage_const_8  * k1_bytes)
k1_int = int(n_mod_p) % modulus
print(f"Recovered k1 (truncated) = {k1_int}")

# ---- Extract and print flag suffix ----
suffix = k1_int.to_bytes(k1_bytes, "big")
try:
    print("Flag suffix:", suffix.decode('ascii'))
except:
    print("Raw suffix bytes:", suffix)


